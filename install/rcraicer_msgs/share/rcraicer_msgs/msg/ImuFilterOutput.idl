// generated from rosidl_adapter/resource/msg.idl.em
// with input from rcraicer_msgs/msg/ImuFilterOutput.msg
// generated code does not contain a copyright notice

#include "geometry_msgs/msg/Quaternion.idl"
#include "geometry_msgs/msg/Vector3.idl"
#include "std_msgs/msg/Header.idl"

module rcraicer_msgs {
  module msg {
    typedef double double__9[9];
    module ImuFilterOutput_Constants {
      const uint16 STATUS_INVALID = 0;
      const uint16 STATUS_VALID = 1;
      const uint16 STATUS_VALID_REFERENCED = 2;
    };
    struct ImuFilterOutput {
      @verbatim (language="comment", text=
        " Output from the 3DM-GX4 attitude estimation filter.")
      std_msgs::msg::Header header;

      @verbatim (language="comment", text=
        " Node on status flags:" "\n"
        " Status flags are implemented as bit-fields." "\n"
        "  0 = invalid" "\n"
        "  1 = valid" "\n"
        "  2 = valid and geo-magnetically referenced (quat_status only)" "\n"
        "" "\n"
        " Note that covariance on orientation becomes invalid as pitch angle exceeds 70 # degrees. This will be indicated by the status flag." "\n"
        " Quaternion status:")
      uint16 quat_status;

      @verbatim (language="comment", text=
        " Bias status")
      uint16 bias_status;

      @verbatim (language="comment", text=
        " Orientation estimate and diagonal covariance")
      geometry_msgs::msg::Quaternion orientation;

      double__9 orientation_covariance;

      @verbatim (language="comment", text=
        " Gyro bias and diagonal covariance")
      geometry_msgs::msg::Vector3 bias;

      double__9 bias_covariance;

      @verbatim (language="comment", text=
        " Covariance statuses")
      uint16 bias_covariance_status;

      uint16 orientation_covariance_status;
    };
  };
};
